# -*- coding: utf-8 -*-
"""ResNet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18LKNjAiv3MhPz9ATrdG1jNyEJ-PYPT6E

# ResNet image classification
"""

from tensorflow.keras.applications import ResNet50

(x_train, y_train), (x_test, y_test) = cifar10.load_data()

# transforming the classes in numbers to vectors
y_train = to_categorical(y_train, 10)
y_test = to_categorical(y_test, 10)

x_train.shape

# Define Resnet Model
model_resnet_50 = Sequential()
model_resnet_50.add(ResNet50(include_top=False,weights="imagenet",input_tensor=None,input_shape=(32,32,3),pooling='avg',classes=10))

model_resnet_50.add(Flatten())

model_resnet_50.add(Dense(units=1024, activation='relu'))

model_resnet_50.add(Dense(units=512, activation='relu'))

model_resnet_50.add(Dense(units=10, activation='softmax'))

# Compile the model
model_resnet_50.compile(loss='categorical_crossentropy',optimizer='adam',metrics=['accuracy'])

# Summary of the model
model_resnet_50.summary()

# Fit the model
model_resnet_50.fit(x_train, y_train, batch_size=128, epochs=20, verbose=1, validation_data=(x_test, y_test))

loss, accuracy = model_resnet_50.evaluate(x_test, y_test, batch_size=64)

Actual = np.argmax(model_resnet_50.predict(x_test),axis=1)
Actual

for i in range(len(y_test)):
  print("X = %s, Predicted = %s" % (y_test[i], Actual[i]))